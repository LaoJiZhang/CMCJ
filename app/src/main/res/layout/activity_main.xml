<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto">

    <data>

        <import type="com.cmcj.gmj.localapp.main.view.MainActivity.MainTab"/>

        <variable
            name="switchTab"
            type="int"/>

        <variable
            name="presenter"
            type="com.cmcj.gmj.localapp.main.presenter.MainPresenter"/>
    </data>

    <!-- CoordinatorLayout是一个增强型的FrameLayout -->
    <android.support.design.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <!--
              AppBarLayout跟它的名字一样，把容器类的组件全部作为AppBar。
                  将AppBarLayout放在CoordinatorLayout中，就可以实现滚动效果。
                  本例中，TabLayout在界面滚动时，随着Toolbar的逐渐隐藏，将占据Toolbar的位置，
                      达到节省屏幕空间，界面动画效果的目的。
        -->
        <!--app:elevation="0dp" AppBarLayout以及ToolBar去除阴影-->
        <android.support.design.widget.AppBarLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@color/white1"
            android:orientation="vertical"
            app:elevation="0dp">

            <!--
                    app:layout_scrollFlags的意思是：

                    设置的layout_scrollFlags有如下几种选项：
                        scroll: 所有想滚动出屏幕的view都需要设置这个flag- 没有设置这个flag的view将被固定在屏幕顶部。
                        enterAlways: 这个flag让任意向下的滚动都会导致该view变为可见，启用快速“返回模式”。
                        enterAlwaysCollapsed: 当你的视图已经设置minHeight属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。
                        exitUntilCollapsed: 当视图会在滚动时，它一直滚动到设置的minHeight时完全隐藏。

                需要注意的是，后面两种模式基本只有在CollapsingToolbarLayout才有用，
                而前面两种模式基本是需要一起使用的，也就是说，这些flag的使用场景，基本已经固定了。
            -->

            <!--解决自定义Toolbar左侧空白区间属性 注意:app:开头 非android:开始-->
            <!--app:contentInsetLeft="0dp"-->
            <!--app:contentInsetStart="0dp"-->
            <android.support.v7.widget.Toolbar
                android:id="@+id/main_toolbar"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:contentInsetLeft="0dp"
                app:contentInsetStart="0dp"
                app:layout_scrollFlags="scroll|enterAlways">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:gravity="center"
                    android:orientation="vertical">

                    <ImageView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="20dp"
                        android:src="@drawable/ic_layout_no_network"/>

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="20dp"
                        android:text="我是浮动顶部"/>
                </LinearLayout>
            </android.support.v7.widget.Toolbar>


            <!--
                   Tabs选项卡，和ViewPager搭配使用可以增大界面的内容展示量，实现各种个性化分类内容展示而不互相干扰！
                   Google在Design support library中提供官方的Tab组件，它就是TabLayout。
                   相比Github上面开源的第三方库，这个更加简单易用。

                   有以下常用属性：
                       app:tabGravity="fill"  表示TabLayout中的Tabs要占满屏幕的width；
                       app:tabSelectedTextColor：Tab被选中字体的颜色；
                       app:tabTextColor：Tab未被选中字体的颜色；
                       app:tabIndicatorColor：Tab指示器下标的颜色；
               -->
            <android.support.design.widget.TabLayout
                android:id="@+id/main_tablayot"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="15dp"
                app:tabIndicatorColor="@color/yellow"
                app:tabIndicatorHeight="2dp"
                app:tabMode="scrollable"
                app:tabSelectedTextColor="@color/yellow"
                app:tabTextColor="@color/black1"/>

            <View
                android:layout_width="match_parent"
                android:layout_height="0.5dp"
                android:background="@color/gray1"/>
        </android.support.design.widget.AppBarLayout>

        <!--
               我们常用的ViewPager，不多说了。你会发现多了一个 app:layout_behavior 属性，没错，
                   如果你使用CoordinatorLayout来实现Toolbar滚动渐变消失动画效果，那就必须在它下面的那个控件中加入这个属性，
                   并且下面的这个控件必须是可滚动的。
               当设置了layout_behavior的控件滑动时，就会触发设置了layout_scrollFlags的控件发生状态的改变。
        -->
        <android.support.v4.view.ViewPager
            android:id="@+id/main_viewpager"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_behavior="@string/appbar_scrolling_view_behavior"/>
    </android.support.design.widget.CoordinatorLayout>
</layout>
